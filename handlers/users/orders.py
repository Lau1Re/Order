from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text

from data.config import ADM_LIST
from filters.IsPrivateChatCheck import IsPrivate
from keyboard.inline.reset_fullfil import Resetting, Cancel
from keyboard.inline.send_look_post import Send_Look
from loader import dp
from states import RegisterOrder


@dp.message_handler(Text(contains='–æ—Ä–¥–µ—Ä'), IsPrivate(), user_id=ADM_LIST)
async def start_enter_order_info(message: types.Message):
    text = '\n ü§ë–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –Ω–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ. <b>–£–∫–∞–∂–∏ —Å–≤–æ—ë –∏–º—è</b>, –∫—Ç–æ –≤–±–∏–ª –æ—Ä–¥–µ—Ä:'

    await message.answer(text, reply_markup=Cancel)
    await RegisterOrder.first()


@dp.message_handler(state=RegisterOrder.NAME)
async def from_name_to_logpass(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(f'–û—Ç–ª–∏—á–Ω–æ, {message.text}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ <b>–ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å</b> –∞–∫–∫–∞—É–Ω—Ç–∞',
                         reply_markup=Resetting)

    await RegisterOrder.LogPass.set()


@dp.message_handler(state=RegisterOrder.LogPass)
async def from_logpass_to_Ordername(message: types.Message, state: FSMContext):
    await state.update_data(LogPass=message.text)
    await message.answer('–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ <b>–∏–º—è —Ç–æ–≤–∞—Ä–∞</b>',
                         reply_markup=Resetting)
    await RegisterOrder.OrderName.set()


@dp.message_handler(state=RegisterOrder.OrderName)
async def from_OrderName_to_HolderName(message: types.Message, state: FSMContext):
    await state.update_data(OrderName=message.text)
    await message.answer('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ <b>–§–ò–û</b> –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞',
                         reply_markup=Resetting)
    await RegisterOrder.HolderName.set()


@dp.message_handler(state=RegisterOrder.HolderName)
async def from_HolderName_to_Address(message: types.Message, state: FSMContext):
    await state.update_data(HolderName=message.text)

    await message.answer('–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å —è –∂–¥—É –æ—Ç —Ç–µ–±—è <b>–∞–¥—Ä–µ—Å</b>',
                         reply_markup=Resetting)
    await RegisterOrder.Address.set()


@dp.message_handler(state=RegisterOrder.Address)
async def from_Address_to_Price(message: types.Message, state: FSMContext):
    await state.update_data(Address=message.text)
    await message.answer('–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ. <b>–û—Ç–ø—Ä–∞–≤—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞</b>',
                         reply_markup=Resetting)
    await RegisterOrder.Price.set()


@dp.message_handler(state=RegisterOrder.Price)
async def finish_fsm(message: types.Message, state: FSMContext):
    await state.update_data(price=message.text)
    await state.reset_state(with_data=False)
    text = '–ü–æ—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å –Ω–∏–º?'
    await message.answer(text, reply_markup=Send_Look)
